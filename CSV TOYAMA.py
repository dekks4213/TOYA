import csv
import requests
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from io import StringIO

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot("6742813805:AAGhaheSKRimtFrKJJpM_dizzOb2OrQX8pQ")

# –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV-—Ñ–∞–π–ª–∞ —Å Google Sheets
csv_url = "https://docs.google.com/spreadsheets/d/1n1GGx5AKQQA5JxpeuAvbbSrDRvk1gvffwJfh6XoKsko/export?format=csv"


def download_csv():
    response = requests.get(csv_url)
    response.encoding = 'utf-8'
    return StringIO(response.text)


def find_column_name(columns, keyword):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
    for column in columns:
        if keyword in column:
            return column
    raise KeyError(f"–ö–æ–ª–æ–Ω–∫–∞ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


def parse_csv():
    csv_data = download_csv()

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 13 —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for _ in range(13):
        next(csv_data)

    reader = csv.DictReader(csv_data)
    columns = reader.fieldnames  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

    try:
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        purchase_date_col = find_column_name(columns, '–î–∞—Ç–∞')
        status_col = find_column_name(columns, '–°—Ç–∞—Ç—É—Å')
        model_col = find_column_name(columns, '–ú–æ–¥–µ–ª—å')
        chassis_number_col = find_column_name(columns, '–ù–æ–º–µ—Ä')
        year_col = find_column_name(columns, '–ì–æ–¥')
        specification_col = find_column_name(columns, '–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è')
        media_col = find_column_name(columns, '–§–æ—Ç–æ')
        configuration_col = find_column_name(columns, '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è')
        auction_link_col = find_column_name(columns, '–°—Å—ã–ª–∫–∞')
        final_cost_col = find_column_name(columns, '–ò—Ç–æ–≥')

    except KeyError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return ["–û—à–∏–±–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∫–æ–ª–æ–Ω–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ CSV —Ñ–∞–π–ª–µ."]

    car_list = []

    for row in reader:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –ø–æ–ª–µ "–ú–æ–¥–µ–ª—å" –ø—É—Å—Ç–æ–µ
        if not row[model_col]:
            continue

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
        purchase_date = row[purchase_date_col]
        status = row[status_col]
        model = row[model_col]
        chassis_number = row[chassis_number_col]  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É–∑–æ–≤–∞
        year = row[year_col]
        specification = row[specification_col]
        media = row[media_col]
        configuration = row[configuration_col]
        auction_link = row[auction_link_col]
        final_cost = row[final_cost_col]

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–¥–∏–∞
        media_text = f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ]({media})" if media else "–ù–µ—Ç —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ"
        auction_text = f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω]({auction_link})" if auction_link else "–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        car_info = (
            f"üöó **–ú–æ–¥–µ–ª—å**: {model}\n"
            f"üìÖ **–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏**: {purchase_date}\n"
            f"üìÑ **–°—Ç–∞—Ç—É—Å**: {status}\n\n"
            f"üî¢ **–ù–æ–º–µ—Ä –∫—É–∑–æ–≤–∞**: {chassis_number}\n"
            f"üìÜ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞**: {year}\n"
            f"‚öôÔ∏è **–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è**: {specification}\n"
            f"üõ†Ô∏è **–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è**: {configuration}\n\n"
            f"üé• {media_text}\n"
            f"üåê {auction_text}\n\n"
            f"üí∞ **–ò—Ç–æ–≥ –≤ –†–§**: {final_cost} —Ä—É–±.\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )
        car_list.append(car_info)

    return car_list


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message,
                 "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_cars –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.")


@bot.message_handler(commands=['get_cars'])
def send_car_list(message):
    car_list = parse_csv()
    for car_info in car_list[:-1]:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        bot.send_message(message.chat.id, car_info, parse_mode="Markdown")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="get_cars"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    bot.send_message(message.chat.id, car_list[-1], parse_mode="Markdown", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "get_cars")
def callback_get_cars(call):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    bot.delete_message(call.message.chat.id, call.message.message_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤–∞
    send_car_list(call.message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()